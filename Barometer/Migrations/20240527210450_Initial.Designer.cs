// <auto-generated />
using System;
using Barometer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Barometer.Migrations
{
    [DbContext(typeof(BarometerContext))]
    [Migration("20240527210450_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Barometer.Model.SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Altitude")
                        .HasColumnType("double");

                    b.Property<double>("Humidity")
                        .HasColumnType("double");

                    b.Property<double>("Pressure")
                        .HasColumnType("double");

                    b.Property<DateTimeOffset>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Measures", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
